# syntax=docker/dockerfile:1
# Build the application from source
FROM golang:1.19 AS build-stage     

# Set destination for COPY
RUN mkdir /app
WORKDIR /app

# Download Go modules
COPY go.mod go.sum ./
RUN go mod download

# Copy the source code. 
COPY . .

RUN go get github.com/githubnemo/CompileDaemon

RUN cp .env.example .env

# Build
# RUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .


# Deploy the application binary into a lean image
FROM gcr.io/distroless/base-debian11 AS build-release-stage

WORKDIR /

COPY --from=build-stage /app/main /app/main
COPY --from=build-stage /app/.env /app/.env

# Optional:
# To bind to a TCP port, runtime parameters must be supplied to the docker command.
# But we can document in the Dockerfile what ports
# the application is going to listen on by default.
# https://docs.docker.com/engine/reference/builder/#expose
EXPOSE 8000

USER nonroot:nonroot

# Run
# CMD ["app/main"]   
# CMD ["CompileDaemon --build='go build app/main.go' --command=./app/main"]   
# ENTRYPOINT ["app/main"]
# ENTRYPOINT ["/usr/local/go/bin/CompileDaemon", "--build='go build app/main.go'", "--command=./main"]
# ENTRYPOINT ["CompileDaemon", "--build='go build main.go' --command='./main'"]
ENTRYPOINT CompileDaemon --build="go build app/main.go" --command="./app/main"

